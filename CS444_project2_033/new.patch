diff -urN linux-yocto-3.14/block/Kconfig.iosched linux/block/Kconfig.iosched
--- linux-yocto-3.14/block/Kconfig.iosched	2016-04-27 21:30:54.167866196 -0700
+++ linux/block/Kconfig.iosched	2016-04-27 21:39:07.513249594 -0700
@@ -39,6 +39,12 @@
 	---help---
 	  Enable group IO scheduling in CFQ.
 
+config IOSCHED_SSTF
+        tristate "SSTF I/O Scheduler"
+        default y
+        ---help---
+          This is a scheduler based on the shortest seek time first algorithm
+
 choice
 	prompt "Default I/O scheduler"
 	default DEFAULT_CFQ
@@ -55,6 +61,10 @@
 	config DEFAULT_NOOP
 		bool "No-op"
         
+        config DEFAULT_SSTF
+                bool "sstf" if IOSCHED_SSTF=y
+
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +72,7 @@
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+        default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff -urN linux-yocto-3.14/block/Makefile linux/block/Makefile
--- linux-yocto-3.14/block/Makefile	2016-04-27 21:30:54.167866196 -0700
+++ linux/block/Makefile	2016-04-27 21:39:06.576233675 -0700
@@ -20,3 +20,4 @@
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
 obj-$(CONFIG_BLK_CMDLINE_PARSER)	+= cmdline-parser.o
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
diff -urN linux-yocto-3.14/block/sstf-iosched.c linux/block/sstf-iosched.c
--- linux-yocto-3.14/block/sstf-iosched.c	1969-12-31 16:00:00.000000000 -0800
+++ linux/block/sstf-iosched.c	2016-04-27 21:39:05.300211997 -0700
@@ -0,0 +1,161 @@
+/*
+ * elevator sstf
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct sstf_data {
+	struct list_head queue;
+        sector_t head;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+                printk("dispatching: %lu\n", (unsigned long) blk_rq_pos(rq));
+
+		return 1;
+	}
+
+
+	return 0;
+}
+
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+        struct request *new;
+        struct list_head *head;
+
+        sector_t sector, request_sector;
+
+        if (list_empty(&nd->queue)) {
+                list_add(&rq->queuelist, &nd->queue);
+        } else {
+                printk("Adding: %llu\n", blk_rq_pos(rq));
+                head = &nd->queue;
+                request_sector = blk_rq_pos(rq);
+                new = list_entry(head->next, struct request, queuelist);
+                sector = blk_rq_pos(new);
+
+                while (request_sector > sector) {
+                        if (head->next != NULL) {
+                                head = head->next;
+                        } else {
+                                break;
+                        }
+                        new = list_entry(head->next, struct request, queuelist);
+                        sector = blk_rq_pos(new);
+                }
+
+                list_add(&rq->queuelist, head);
+        }
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+
+        //printk("End of former request\n");
+
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+
+        //printk("End of latter request\n");
+
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+
+        //printk("End of init queue\n");
+
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_sstf = {
+        .ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+MODULE_AUTHOR("Devin Foulger");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("SSTF IO scheduler");
